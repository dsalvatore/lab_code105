// APS105-F15 Lab 8 Lab8.c
//
// This is a program written to maintain a personal music library,
// using a linked list to hold the songs in the library.
//
// Author: Yitong
// Student Number: 1003054133


#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>

// A node in the linked list

// Each string in the node is declared as a character pointer variable,
// so they need to be dynamically allocated using the malloc() function,
// and deallocated using the free() function after use.

typedef struct node
{
    char *songName;
    char *artist;
    char *genre;
    struct node *link;
} Node;

// Declarations of linked list functions
//
// Declare your own linked list functions here.
Node *newNode(char *input, char *temArtist, char *temGenre, Node *link);
Node *insertAtFront(Node *head, Node *newNode);
Node *insertAtTail(Node *head, Node *newNode);
Node *deleteSong(Node *head, char *songName, bool *foundSong);
Node *insertIntoOrderedList(Node *head, char *input, Node *newNode);
Node *search(Node *head, char *searchSong);
Node *deleteAllSongs(Node *head);
void printList(Node *head);
// Declarations of support functions
// See below the main function for descriptions of what these functions do

void getStringFromUserInput(char s[], int arraySize);
void songNameDuplicate(char songName[]);
void songNameFound(char songName[]);
void songNameNotFound(char songName[]);
void songNameDeleted(char songName[]);
void artistFound(char artist[]);
void artistNotFound(char artist[]);
void printMusicLibraryEmpty(void);
void printMusicLibraryTitle(void);

const int MAX_LENGTH = 1024;

int main(void) {
    // Declare the head of the linked list.
    Node *head = NULL;
    Node *musicLib;

    // Announce the start of the program
    printf("%s", "Personal Music Library.\n\n");
    printf("%s", "Commands are I (insert), D (delete), S (search by song name),\n"
           "P (print), Q (quit).\n");
    
    char response;
    char input[MAX_LENGTH + 1];
    char temArtist[MAX_LENGTH + 1];
    char temGenre[MAX_LENGTH + 1];
    
    do
    {
        printf("\nCommand?: ");
        getStringFromUserInput(input, MAX_LENGTH);
        
        // Response is the first character entered by user.
        // Convert to uppercase to simplify later comparisons.
        response = toupper(input[0]);
        
        if (response == 'I')
        {
            // Insert a song into the linked list.
            // Maintain the list in alphabetical order by song name.
            printf("Song name: ");
            getStringFromUserInput(input, MAX_LENGTH);
            printf("Artist: ");
            getStringFromUserInput(temArtist, MAX_LENGTH);
            printf("Genre: ");
            getStringFromUserInput(temGenre, MAX_LENGTH);
            
            bool endTheLoop = false;

            musicLib = newNode(input, temArtist, temGenre, NULL);
            
            if(head == NULL)
            {
                head = insertAtFront(head, musicLib);
            }
            else
            {
                while(!endTheLoop)
                {
                    if(strcmp(input, head -> songName) == 0)
                    {
                        songNameDuplicate(input);
                        endTheLoop = true;
                    }
                    else if(strcmp(input, head -> songName) < 0)
                    {
                        head = insertAtFront(head, musicLib);
                        endTheLoop = true;
                    }
                    else if(strcmp(input, head -> songName) > 0)
                    {
                        head = insertIntoOrderedList(head, input, musicLib);
                        endTheLoop = true;
                    }
                }
            }
        }
        else if (response == 'D')
        {
            // Delete a song from the list.
            bool found = true;
            
            printf("\nEnter the name of the song to be deleted: ");
            
            getStringFromUserInput(input, MAX_LENGTH);
            head = deleteSong(head, input, &found);
           if(found)
           {
               songNameDeleted(input);
           }
        }
        else if (response == 'S')
        {
            // Search for a song by its name.
            printf("\nEnter the name of the song to search for: ");
            getStringFromUserInput(input, MAX_LENGTH);
            
            musicLib = search(head, input);
            
            if(musicLib != NULL)
            {
                songNameFound(input);
                printf("%s\n", musicLib -> songName);
                printf("%s\n", musicLib -> artist);
                printf("%s\n", musicLib -> genre);
            }
        }
        else if (response == 'P')
        {
            // Print the music library.
            printMusicLibraryTitle();
            printList(head);
        }
        else if (response == 'Q') {
            ; // do nothing, we'll catch this below
        }
        else {
            // do this if no command matched ...
            printf("\nInvalid command.\n");
        }
    } while (response != 'Q');
    
    // Delete the entire linked list.
    head = deleteAllSongs(head);
    printMusicLibraryEmpty();
    
    return 0;
}

// Support Function Definitions

// Prompt the user for a string safely, without buffer overflow
void getStringFromUserInput(char s[], int maxStrLength) {
    int i = 0;
    char c;
    
    while (i < maxStrLength && (c = getchar()) != '\n')
        s[i++] = c;
    
    s[i] = '\0';
}

// Function to call when the user is trying to insert a song name
// that is already in the personal music library.
void songNameDuplicate(char songName[])
{
    printf("\nA song with the name '%s' is already in the music library.\n"
           "No new song entered.\n", songName);
}

// Function to call when a song name was found in the personal music library.
void songNameFound(char songName[])
{
    printf("\nThe song name '%s' was found in the music library.\n\n",
           songName);
}

// Function to call when a song name was not found in the personal music library.
void songNameNotFound(char songName[])
{
    printf("\nThe song name '%s' was not found in the music library.\n",
           songName);
}

// Function to call when a song name that is to be deleted
// was found in the personal music library.
void songNameDeleted(char songName[])
{
    printf("\nDeleting a song with name '%s' from the music library.\n",
           songName);
}

// Function to call when printing an empty music library.
void printMusicLibraryEmpty(void)
{
    printf("\nThe music library is empty.\n");
}

// Function to call to print a title when the entire music library is printed.
void printMusicLibraryTitle(void)
{
    printf("\nMy Personal Music Library: \n");
}

// Add your functions below this line.

// Function to call to create a new node for the list
Node *newNode(char *input, char *temArtist, char *temGenre, Node *link)
{
    Node *new;
    
    new = (Node*) malloc(sizeof(Node));
    new -> songName = (char*) malloc(strlen(input) * sizeof(char) + 1); // (*new).songName = address
    new -> artist = (char*) malloc(strlen(temArtist) * sizeof(char) + 1);
    new -> genre = (char*) malloc(strlen(temGenre) * sizeof(char) + 1);
    
    if (new != NULL)
    {
        //copy each song's information to the newNode
        strcpy(new -> songName, input);
        strcpy(new -> artist, temArtist);
        strcpy(new -> genre, temGenre);
    }
    return new;
}

// insert an element to the front of the list
Node *insertAtFront(Node *head, Node *newNode)
{
    
    newNode->link = head;  // this new head sets its pointer to point to the
    // if list was empty, then head = NULL, and now newNode->link = NULL
    // if list wasn't empty, newNode->link now points to old head.
    
    return(newNode);  // must return a pointer to the new head
}

// insert an element to the tail of the list
Node *insertAtTail(Node *head, Node *newNode)
{
    if (head == NULL)
        return newNode;
    else
    {
        Node *current = head;
        
        while (current -> link != NULL)
            current = current -> link;
        
        current -> link = newNode;
        return head;
    }
}

// Inserting a new node into an ordered linked list, maintaining its order
Node *insertIntoOrderedList(Node *head, char *input, Node *newNode)
{
    if (head == NULL || input < head -> songName)
    return newNode;
    
    Node *current = head;
    
    while (current -> link != NULL && strcmp(input, current -> link -> songName) > 0)
        current = current -> link;
    
    newNode -> link = current -> link;
    current -> link = newNode;
    return head;
}

// Printing all the nodes in a linked list
// must give it the head of the list

void printList(Node *head)
{
    Node *current;
    current = head;
    
    while (current != NULL)
    {
        printf("\n%s\n", current -> songName);
        printf("%s\n", current -> artist);
        printf("%s\n", current -> genre);
        
        current = current -> link;
    }
}

// Deleting the first occurrence of a search key from a linked list
Node *deleteSong(Node *head, char *removeSong, bool *foundSong)
{
    if (head == NULL)
        return NULL;
    
    // If the first node is to be deleted
    if (strcmp(head -> songName, removeSong) == 0)
    {
        Node *secondNode = head -> link;
        free(head -> songName);
        free(head -> artist);
        free(head -> genre);
        free(head);
        return secondNode;
    }
    
    bool found = false;
    Node *current = head;
    
    while (!found && current -> link != NULL) {
        if (strcmp(current -> link -> songName, removeSong) == 0)
            found = true;
        else
            current = current -> link;
    }
    
    // if there exists a node to be deleted
    if (current -> link != NULL)
    {
        Node *songToRemove = current -> link;
        current -> link = current -> link -> link;
        
        //free all those song info first
        //then free the Node structure
        free(songToRemove -> songName);
        free(songToRemove -> artist);
        free(songToRemove -> genre);
        free(songToRemove);
    }
    
    if (!found)
    {
        songNameNotFound(removeSong);
        *foundSong = false;
    }
    
    return current;
}

// Searching through the linked list for a particular value
// return pointer to that record if found, NULL if not found
Node *search(Node *head, char *searchSong)
{
    Node *current = head;
    bool found = false;
    
    while (current != NULL && found == false)
    {
        if (strcmp(current -> songName, searchSong) == 0)
            found = true;
        
        else current = current -> link;
    }
    // if above loop found searchKey, current will point to it; otherwise
    if(!found)
        songNameNotFound(searchSong);
    
    return current;
}

// Deleting all the nodes in the linked list
Node *deleteAllSongs(Node *head)
{
    while (head != NULL)
    {
        Node *firstSong = head;
        head = head -> link;
        
        // Print the linked list to confirm deletion.
        songNameDeleted(firstSong -> songName);
        //free each node
        free(firstSong -> songName);
        free(firstSong -> artist);
        free(firstSong -> genre);
        free(firstSong);
    }
    return NULL;
}
