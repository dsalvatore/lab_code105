// APS105-F15 Lab 9 Lab9.c
//
// This is a program written to maintain a personal music library,
// using a linked list to hold the songs in the library.
//
// Author: Yitong
// Student Number: 1003054133

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>


#define MAX_LENGTH 1024
#define MAX_LIBRARY_SIZE 100

typedef struct song 
{
	char songName[MAX_LENGTH];
	char artist[MAX_LENGTH];
} Song;

//Declarations of functions needed
//void cocktailSort(Song library[], int size);
void getStringFromUserInput(char s[], int arraySize);
void printMusicLibraryEmpty(void);
void printMusicLibraryTitle(void);
void printList(Song library[], int numSong);

int main(void)
{
	Song Library[MAX_LIBRARY_SIZE];
	int numSong = 0;

	// Announce the start of the program
	printf("%s", "Personal Music Library.\n\n");
	printf("%s", "Commands are I (insert), S (sort by artist),\n"
		"P (print), Q (quit).\n");

	char response;
	char input[MAX_LENGTH + 1];
	char song[MAX_LENGTH + 1];
	char artist[MAX_LENGTH + 1];
	do {
		printf("\nCommand?: ");
		getStringFromUserInput(input, MAX_LENGTH);

		// Response is the first character entered by user.
		// Convert to uppercase to simplify later comparisons.
		response = toupper(input[0]);

		if (response == 'I')
		{
			printf("Song name: ");
			getStringFromUserInput(song, MAX_LENGTH);
			printf("Artist: ");
			getStringFromUserInput(artist, MAX_LENGTH);

			if (numSong < MAX_LIBRARY_SIZE - 1)
			{
				strcpy(Library[numSong].songName, song);
				strcpy(Library[numSong].artist, artist);
			}

			numSong++;
		}

		else if (response == 'S') {
			// Search for a song by its name.

			printf("\nEnter the name of the song to search for: ");

			//   ADD STATEMENT(S) HERE

		}
		else if (response == 'P') 
		{
			// Print the music library.
			if (numSong == 0)
			{
				printMusicLibraryEmpty();
			}
			else
			{
				printMusicLibraryTitle();
			}

		}
		else if (response == 'Q') 
		{
			return 0;
		}

		else 
		{
			// do this if no command matched ...
			printf("\nInvalid command.\n");
		}
	} while (response != 'Q');

	// Delete the entire linked list.
	//   ADD STATEMENT(S) HERE

	// Print the linked list to confirm deletion.
	//   ADD STATEMENT(S) HERE

	return 0;
}
	


// Support Function Definitions

// Prompt the user for a string safely, without buffer overflow
void getStringFromUserInput(char s[], int maxStrLength) {
	int i = 0;
	char c;

	while (i < maxStrLength && (c = getchar()) != '\n')
		s[i++] = c;

	s[i] = '\0';
}

// Function to call when printing an empty music library.
void printMusicLibraryEmpty(void)
{
	printf("\nThe music library is empty.\n");
}

// Function to call to print a title when the entire music library is printed.
void printMusicLibraryTitle(void)
{
	printf("\nMy Personal Music Library: \n");
}

// Add your functions below this line.

// cocktailSort
// void cocktailSort(Song library[], int size)
// {

// }

void printList(Song library[], int numSong)
{
	for (int i = 0; i < numSong; i++)
	{
		printf("%s\n", library[i].songName);
		printf("%s\n", library[i].artist);
	}
}
